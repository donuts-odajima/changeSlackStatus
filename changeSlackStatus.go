package main

import (
	"net/http"
	"net/url"
	"bytes"
	"encoding/json"
	"io/ioutil"
	"fmt"
	"strconv"
)

// Auto generated by https://mholt.github.io/json-to-go/
type owmResponse struct {
	Coord struct {
		Lon float64 `json:"lon"`
		Lat float64 `json:"lat"`
	} `json:"coord"`
	Sys struct {
		Country string `json:"country"`
		Sunrise int    `json:"sunrise"`
		Sunset  int    `json:"sunset"`
	} `json:"sys"`
	Weather []struct {
		ID          int    `json:"id"`
		Main        string `json:"main"`
		Description string `json:"description"`
		Icon        string `json:"icon"`
	} `json:"weather"`
	Main struct {
		Temp     float64 `json:"temp"`
		Humidity int     `json:"humidity"`
		Pressure int     `json:"pressure"`
		TempMin  float64 `json:"temp_min"`
		TempMax  float64 `json:"temp_max"`
	} `json:"main"`
	Wind struct {
		Speed float64 `json:"speed"`
		Deg   float64 `json:"deg"`
	} `json:"wind"`
	Rain struct {
		ThreeH int `json:"3h"`
	} `json:"rain"`
	Clouds struct {
		All int `json:"all"`
	} `json:"clouds"`
	Dt   int    `json:"dt"`
	ID   int    `json:"id"`
	Name string `json:"name"`
	Cod  int    `json:"cod"`
}

type slackProfile struct {
	StatusText  string `json:"status_text"`
	StatusEmoji string `json:"status_emoji"`
}
type slackStatusData struct {
	Token   string  `json:"token"`
	Profile slackProfile `json:"profile"`
}

// Map for OWM weather to Slack emoji
// https://openweathermap.org/weather-conditions
var weatherToEmoji = map[string]string {
	"Clear": ":sunny:",
	"Clouds": ":cloud:",
	"Rain": ":umbrella_with_rain_drops:",
	"Fog": ":fog:",
	"Mist": ":fog:",
	"Haze": ":fog:",
	"Sand": ":desert:",
}

func main() {
	cityData := url.Values{}
	cityData.Add("lon", CityLon)
	cityData.Add("lat", CityLat)
	cityData.Add("APPID", OWMApiKey)

	statusData, err := getCityWeather(cityData)
	if err != nil {
		panic(err)
	}

	err = postSlackStatus(*statusData)
	if err != nil {
		panic(err)
	}
}

func getCityWeather(cityData url.Values) (*slackStatusData, error) {
	apiURL := OWMApiURL + "?" + cityData.Encode()
	resp, err := http.Get(apiURL)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	byteArray, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	jsonBytes := ([]byte)(byteArray)
	data := new(owmResponse)
	if err := json.Unmarshal(jsonBytes, data); err != nil {
        return nil, err
    }
	fmt.Println(data.Weather[0].Main)

	statusData := new(slackStatusData)
	statusData.Token = SlackUserToken
	weather := data.Weather[0].Main
	statusText := weather
	tempMin := data.Main.TempMin - 273.15
	tempMax := data.Main.TempMax - 273.15
	statusText += " " + strconv.FormatFloat(tempMin, 'f', 1, 64) + "~" + strconv.FormatFloat(tempMax, 'f', 1, 64) + "â„ƒ"
	statusData.Profile = slackProfile {
		StatusText: statusText,
		StatusEmoji: weatherToEmoji[weather],
	}
	return statusData, err
}

func postSlackStatus(statusData slackStatusData) error {
	jsonData, err := json.Marshal(statusData)
	if err != nil {
		return err
	}

	req, err := http.NewRequest(
		"POST",
		SlackAPIURL,
		bytes.NewBuffer([]byte(jsonData)),
	)
	if err != nil {
		return err
	}

	req.Header.Set("Authorization", SlackUserToken)
	req.Header.Set("Content-Type", "application/json")

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	return err
}
